<?php

use Illuminate\Support\Facades\DB;

/**
 * User: purna pachhai
 * Date: 4/5/16
 * Time: 5:04 PM
 */

function number($str)
{
    $str = strval($str);
    $array = array(
        0 => '&#2406;',
        1 => '&#2407;',
        2 => '&#2408;',
        3 => '&#2409;',
        4 => '&#2410;',
        5 => '&#2411;',
        6 => '&#2412;',
        7 => '&#2413;',
        8 => '&#2414;',
        9 => '&#2415;'
    );
    $utf = "";
    $cnt = strlen($str);
    for ($i = 0; $i < $cnt; $i++) {
        if (!isset($array[$str[$i]])) {
            $utf .= $str[$i];
        } else {
            $utf .= $array[$str[$i]];
        }
    }
    return $utf;
}

function rrmdir($dir)
{
    if (is_dir($dir)) {
        $objects = scandir($dir);
        foreach ($objects as $object) {
            if ($object != "." && $object != "..") {
                if (is_dir($dir . "/" . $object))
                    rrmdir($dir . "/" . $object);
                else
                    unlink($dir . "/" . $object);
            }
        }
        rmdir($dir);
    }
}

function setActive($path)
{
    return Request::is($path . '*') ? ' class=treeview' : '';
}

function convert_number_to_words($number)
{
    $hyphen = ' ';
    $conjunction = ' ';
    $separator = ', ';
    $negative = '- ';
    $decimal = ' Decimal ';
    $maximum_number = 1000000000000;
    $minimum_number = 0;
    $dictionary = array(
        0 => 'Zero',
        1 => 'One',
        2 => 'Two',
        3 => 'Three',
        4 => 'Four ',
        5 => 'Five ',
        6 => 'Six ',
        7 => 'Seven ',
        8 => 'Eight',
        9 => 'Nine ',
        10 => 'Ten ',
        11 => 'Eleven ',
        12 => 'Twelve ',
        13 => 'Thirteen',
        14 => 'Fourteen',
        15 => 'Fifteen',
        16 => 'Sixteen',
        17 => 'Seventeen',
        18 => 'Eighteen',
        19 => 'Nineteen',
        20 => 'Twenty',
        21 => 'Twenty One',
        22 => 'Twenty Two',
        23 => 'Twenty Three',
        24 => 'Twenty Four',
        25 => 'Twenty Five',
        26 => 'Twenty Six',
        27 => 'Twenty Seven',
        28 => 'Twenty Eight',
        29 => 'Twenty Nine',
        30 => 'Thirty',
        31 => 'Thirty One',
        32 => 'Thirty Two',
        33 => 'Thirty Three',
        34 => 'Thirty Four',
        35 => 'Thirty Five',
        36 => 'Thirty Six',
        37 => 'Thirty Seven',
        38 => 'Thirty Eight',
        39 => 'Thirty Nine',
        40 => 'Forty',
        41 => 'Forty One',
        42 => 'Forty Two',
        43 => 'Forty Three',
        44 => 'Forty Four',
        45 => 'Forty Five',
        46 => 'Forty Six',
        47 => 'Forty Seven',
        48 => 'Forty Eight',
        49 => 'Forty Nine',
        50 => 'Fifty',
        51 => 'Fifty One',
        52 => 'Fifty Two',
        53 => 'Fifty Three',
        54 => 'Fifty Four',
        55 => 'Fifty Five',
        56 => 'Fifty Six',
        57 => 'Fifty Seven',
        58 => 'Fifty Eight',
        59 => 'Fifty Nine',
        60 => 'Sixty',
        61 => 'Sixty One',
        62 => 'Sixty Two',
        63 => 'Sixty Three',
        64 => 'Sixty Four',
        65 => 'Sixty Five',
        66 => 'Sixty Six',
        67 => 'Sixty Seven',
        68 => 'Sixty Eight',
        69 => 'Sixty Nine',
        70 => 'Seventy ',
        71 => 'Seventy One',
        72 => 'Seventy Two',
        73 => 'Seventy Three',
        74 => 'Seventy Four',
        75 => 'Seventy Five',
        76 => 'Seventy Six',
        77 => 'Seventy Seven',
        78 => 'Seventy Eight',
        79 => 'Seventy Nine',
        80 => 'Eight',
        81 => 'Eighty One',
        82 => 'Eighty Two',
        83 => 'Eighty Three',
        84 => 'Eighty Four',
        85 => 'Eighty Five',
        86 => 'Eighty Six',
        87 => 'Eighty Seven',
        88 => 'Eighty Eight',
        89 => 'Eighty Nine',
        90 => 'Ninety',
        91 => 'Ninety One',
        92 => 'Ninety Two',
        93 => 'Ninety Three',
        94 => 'Ninety Four',
        95 => 'Ninety Five',
        96 => 'Ninety Six',
        97 => 'Ninety Seven',
        98 => 'Ninety Eight',
        99 => 'Ninety Nine',
        100 => 'Hundred',
        1000 => 'Thousand',
        100000 => 'Lakh',
        10000000 => 'Crore ',
        1000000000 => 'Arab',
        1000000000000 => 'Kharab'
    );

    if (!is_numeric($number)) {
        return false;
    }

    if (($number >= 0 && (int)$number < 0) || (int)$number < 0 - $maximum_number) {
        // overflow
        trigger_error($minimum_number . ' and ' . $maximum_number . 'बिचको संख्या मात्रै हाल्नुहोला ',
            E_USER_WARNING
        );
        return false;
    }

    if ($number < 0) {
        return $negative . convert_number_to_words(abs($number));
    }

    $string = $fraction = null;

    if (strpos($number, '.') !== false) {
        list($number, $fraction) = explode('.', $number);
    }

    switch (true) {
        case $number < 100:
            $string = $dictionary[$number];
            break;
//        case $number < 100:
//            //$tens   = ((int) ($number));
//            $units  = $number % 10;
//            $string = $dictionary[$number];
//            if ($units) {
//                $string .= $hyphen;
//            }
//            break;
        case $number < 1000:
            $hundreds = $number / 100;
            $remainder = $number % 100;
            $string = $dictionary[$hundreds] . ' ' . $dictionary[100];
            if ($remainder) {
                $string .= $conjunction . convert_number_to_words($remainder);
            }
            break;

        case $number < 100000:
            $thousands = $number / 1000;
            $remainder = $number % 1000;
            $string = $dictionary[$thousands] . ' ' . $dictionary[1000];
            if ($remainder) {
                $string .= $conjunction . convert_number_to_words($remainder);
            }
            break;
        default:
            $baseUnit = pow(100000, floor(log($number, 1000)));
            $numBaseUnits = (int)($number / $baseUnit);
            $remainder = $number % $baseUnit;
            $string = convert_number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];
            if ($remainder) {
                $string .= $remainder < 100 ? $conjunction : $separator;
                $string .= convert_number_to_words($remainder);
            }
            break;
    }

    if (null !== $fraction && is_numeric($fraction)) {
        $string .= $decimal;
        $words = array();
        foreach (str_split((string)$fraction) as $number) {
            $words[] = $dictionary[$number];
        }
        $string .= implode(' ', $words);
    }

    return $string;
}


$_bs = [
    0 => [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    1 => [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    2 => [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    3 => [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    4 => [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    5 => [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    6 => [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    7 => [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    8 => [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
    9 => [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    10 => [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    11 => [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    12 => [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    13 => [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    14 => [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    15 => [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    16 => [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    17 => [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    18 => [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    19 => [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    20 => [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    21 => [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    22 => [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    23 => [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    24 => [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    25 => [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    26 => [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    27 => [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    28 => [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    29 => [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
    30 => [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    31 => [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    32 => [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    33 => [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    34 => [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    35 => [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
    36 => [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    37 => [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    38 => [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    39 => [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    40 => [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    41 => [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    42 => [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    43 => [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    44 => [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    45 => [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    46 => [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    47 => [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    48 => [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    49 => [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    50 => [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    51 => [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    52 => [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    53 => [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    54 => [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    55 => [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    56 => [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
    57 => [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    58 => [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    59 => [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    60 => [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    61 => [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    62 => [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
    63 => [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    64 => [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    65 => [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    66 => [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
    67 => [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    68 => [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    69 => [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    70 => [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
    71 => [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    72 => [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
    73 => [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
    74 => [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    75 => [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    76 => [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    77 => [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
    78 => [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
    79 => [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
    80 => [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
    81 => [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    82 => [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    83 => [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
    84 => [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
    85 => [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
    86 => [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    87 => [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
    88 => [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
    89 => [2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    90 => [2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
];

$_nep_date = ['year' => '', 'month' => '', 'date' => '', 'day' => '', 'nmonth' => '', 'num_day' => ''];
$_eng_date = ['year' => '', 'month' => '', 'date' => '', 'day' => '', 'emonth' => '', 'num_day' => ''];
$debug_info = '';

function _get_day_of_week($day)
{
    switch ($day) {
        case 1:
            $day = 'आईतवार';
            break;
        case 2:
            $day = 'सोमबार';
            break;
        case 3:
            $day = 'मंगलवार';
            break;
        case 4:
            $day = 'बुधबार';
            break;
        case 5:
            $day = 'बिहीबार';
            break;
        case 6:
            $day = 'शुक्रबार';
            break;
        case 7:
            $day = 'शनिबार';
            break;
    }
    return $day;
}


function _get_english_month($m)
{
    $eMonth = false;
    switch ($m) {
        case 1:
            $eMonth = 'January';
            break;
        case 2:
            $eMonth = 'February';
            break;
        case 3:
            $eMonth = 'March';
            break;
        case 4:
            $eMonth = 'April';
            break;
        case 5:
            $eMonth = 'May';
            break;
        case 6:
            $eMonth = 'June';
            break;
        case 7:
            $eMonth = 'July';
            break;
        case 8:
            $eMonth = 'August';
            break;
        case 9:
            $eMonth = 'September';
            break;
        case 10:
            $eMonth = 'October';
            break;
        case 11:
            $eMonth = 'November';
            break;
        case 12:
            $eMonth = 'December';
    }
    return $eMonth;
}


function _get_nepali_month($m)
{
    $n_month = false;
    switch ($m) {
        case 1:
            $n_month = 'बैशाख';
            break;
        case 2:
            $n_month = 'जेष्ठ';
            break;
        case 3:
            $n_month = 'असार';
            break;
        case 4:
            $n_month = 'श्रावण';
            break;
        case 5:
            $n_month = 'भाद्र';
            break;
        case 6:
            $n_month = 'आश्विन';
            break;
        case 7:
            $n_month = 'कार्तिक';
            break;
        case 8:
            $n_month = 'मंसिर';
            break;
        case 9:
            $n_month = 'पुष';
            break;
        case 10:
            $n_month = 'माघ';
            break;
        case 11:
            $n_month = 'फाल्गुन';
            break;
        case 12:
            $n_month = 'चैत्र';
            break;
    }
    return $n_month;
}

function _is_in_range_eng($yy, $mm, $dd)
{
    if ($yy < 1944 || $yy > 2033) {
        return 'Supported only between 1944-2022';
    }
    if ($mm < 1 || $mm > 12) {
        return 'Error! month value can be between 1-12 only';
    }
    if ($dd < 1 || $dd > 31) {
        return 'Error! day value can be between 1-31 only';
    }
    return true;
}

/**
 * Check if date is with in nepali data range.
 *
 * @param int $yy
 * @param int $mm
 * @param int $dd
 *
 * @return bool
 */
function _is_in_range_nep($yy, $mm, $dd)
{
    if ($yy < 2000 || $yy > 2089) {
        return 'Supported only between 2000-2089';
    }
    if ($mm < 1 || $mm > 12) {
        return 'Error! month value can be between 1-12 only';
    }
    if ($dd < 1 || $dd > 32) {
        return 'Error! day value can be between 1-31 only';
    }
    return true;
}

function is_leap_year($year)
{
    $a = $year;
    if ($a % 100 == 0) {
        if ($a % 400 == 0) {
            return true;
        } else {
            return false;
        }
    } else {
        if ($a % 4 == 0) {
            return true;
        } else {
            return false;
        }
    }
}

/**
 * currently can only calculate the date between AD 1944-2033...
 *
 * @param int $yy
 * @param int $mm
 * @param int $dd
 *
 * @return array
 */
function eng_to_nep($yy, $mm, $dd)
{

    // Check for date range
    $chk = _is_in_range_eng($yy, $mm, $dd);

    if ($chk !== true) {

        die($chk);
    } else {


        // Month data.
        $month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        // Month for leap year
        $lmonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        $def_eyy = 1944;    // initial english date.
        $def_nyy = 2000;
        $def_nmm = 9;
        $def_ndd = 17 - 1;    // inital nepali date.
        $total_eDays = 0;
        $total_nDays = 0;
        $a = 0;
        $day = 7 - 1;
        $m = 0;
        $y = 0;
        $i = 0;
        $j = 0;
        $numDay = 0;
        // Count total no. of days in-terms year
        for ($i = 0; $i < ($yy - $def_eyy); $i++) { //total days for month calculation...(english)
            if (is_leap_year($def_eyy + $i) === true) {

                for ($j = 0; $j < 12; $j++) {
                    $total_eDays += $lmonth[$j];
                }
            } else {
                for ($j = 0; $j < 12; $j++) {
                    $total_eDays += $month[$j];
                }
            }
        }
        // Count total no. of days in-terms of month
        for ($i = 0; $i < ($mm - 1); $i++) {
            if (is_leap_year($yy) === true) {

                $total_eDays += $lmonth[$i];
            } else {
                $total_eDays += $month[$i];
            }
        }
        // Count total no. of days in-terms of date
        $total_eDays += $dd;
        $i = 0;
        $j = $def_nmm;
        $total_nDays = $def_ndd;
        $m = $def_nmm;
        $y = $def_nyy;
        // Count nepali date from array
        while ($total_eDays != 0) {
            $_bs = [
                0 => [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                1 => [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                2 => [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                3 => [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                4 => [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                5 => [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                6 => [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                7 => [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                8 => [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
                9 => [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                10 => [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                11 => [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                12 => [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                13 => [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                14 => [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                15 => [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                16 => [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                17 => [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                18 => [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                19 => [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                20 => [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                21 => [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                22 => [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                23 => [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                24 => [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                25 => [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                26 => [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                27 => [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                28 => [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                29 => [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
                30 => [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                31 => [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                32 => [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                33 => [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                34 => [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                35 => [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
                36 => [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                37 => [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                38 => [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                39 => [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                40 => [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                41 => [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                42 => [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                43 => [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                44 => [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                45 => [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                46 => [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                47 => [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                48 => [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                49 => [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                50 => [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                51 => [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                52 => [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                53 => [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                54 => [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                55 => [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                56 => [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
                57 => [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                58 => [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                59 => [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                60 => [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                61 => [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                62 => [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
                63 => [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                64 => [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                65 => [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                66 => [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
                67 => [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                68 => [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                69 => [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                70 => [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                71 => [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                72 => [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                73 => [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                74 => [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                75 => [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                76 => [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                77 => [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                78 => [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                79 => [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                80 => [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                81 => [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                82 => [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                83 => [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
                84 => [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
                85 => [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
                86 => [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                87 => [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
                88 => [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
                89 => [2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                90 => [2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
            ];

            $a = $_bs[$i][$j];
            $total_nDays++;        //count the days
            $day++;                //count the days interms of 7 days
            if ($total_nDays > $a) {
                $m++;
                $total_nDays = 1;
                $j++;
            }
            if ($day > 7) {
                $day = 1;
            }
            if ($m > 12) {
                $y++;
                $m = 1;
            }
            if ($j > 12) {
                $j = 1;
                $i++;
            }
            $total_eDays--;
        }
        $numDay = $day;
        // _nep_date['year'] = $y;
        // _nep_date['month'] = $m;
        // _nep_date['date'] = $total_nDays;
        // $this->_nep_date['day'] = $this->_get_day_of_week($day);
        // $this->_nep_date['nmonth'] = $this->_get_nepali_month($m);
        // $this->_nep_date['num_day'] = $numDay;
        // $mnth= _get_nepali_month($m);
        // $weekName= _get_day_of_week($day);
        return $y . '-' . sprintf('%02d', $m) . '-' . sprintf('%02d', $total_nDays);
        // return _nep_date;
    }
}

function eng_to_nep_dashboard($yy, $mm, $dd)
{

    // Check for date range
    $chk = _is_in_range_eng($yy, $mm, $dd);

    if ($chk !== true) {

        die($chk);
    } else {


        // Month data.
        $month = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        // Month for leap year
        $lmonth = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        $def_eyy = 1944;    // initial english date.
        $def_nyy = 2000;
        $def_nmm = 9;
        $def_ndd = 17 - 1;    // inital nepali date.
        $total_eDays = 0;
        $total_nDays = 0;
        $a = 0;
        $day = 7 - 1;
        $m = 0;
        $y = 0;
        $i = 0;
        $j = 0;
        $numDay = 0;
        // Count total no. of days in-terms year
        for ($i = 0; $i < ($yy - $def_eyy); $i++) { //total days for month calculation...(english)
            if (is_leap_year($def_eyy + $i) === true) {

                for ($j = 0; $j < 12; $j++) {
                    $total_eDays += $lmonth[$j];
                }
            } else {
                for ($j = 0; $j < 12; $j++) {
                    $total_eDays += $month[$j];
                }
            }
        }
        // Count total no. of days in-terms of month
        for ($i = 0; $i < ($mm - 1); $i++) {
            if (is_leap_year($yy) === true) {

                $total_eDays += $lmonth[$i];
            } else {
                $total_eDays += $month[$i];
            }
        }
        // Count total no. of days in-terms of date
        $total_eDays += $dd;
        $i = 0;
        $j = $def_nmm;
        $total_nDays = $def_ndd;
        $m = $def_nmm;
        $y = $def_nyy;
        // Count nepali date from array
        while ($total_eDays != 0) {
            $_bs = [
                0 => [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                1 => [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                2 => [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                3 => [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                4 => [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                5 => [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                6 => [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                7 => [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                8 => [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
                9 => [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                10 => [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                11 => [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                12 => [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                13 => [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                14 => [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                15 => [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                16 => [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                17 => [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                18 => [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                19 => [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                20 => [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                21 => [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                22 => [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                23 => [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                24 => [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                25 => [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                26 => [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                27 => [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                28 => [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                29 => [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
                30 => [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                31 => [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                32 => [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                33 => [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                34 => [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                35 => [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
                36 => [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                37 => [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                38 => [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                39 => [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                40 => [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                41 => [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                42 => [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                43 => [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                44 => [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                45 => [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                46 => [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                47 => [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                48 => [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                49 => [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                50 => [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                51 => [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                52 => [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                53 => [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                54 => [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                55 => [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                56 => [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
                57 => [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                58 => [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                59 => [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                60 => [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                61 => [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                62 => [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
                63 => [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                64 => [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                65 => [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                66 => [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
                67 => [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                68 => [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                69 => [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                70 => [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
                71 => [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                72 => [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
                73 => [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
                74 => [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                75 => [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                76 => [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                77 => [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
                78 => [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
                79 => [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
                80 => [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
                81 => [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                82 => [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                83 => [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
                84 => [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
                85 => [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
                86 => [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                87 => [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
                88 => [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
                89 => [2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
                90 => [2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
            ];

            $a = $_bs[$i][$j];
            $total_nDays++;        //count the days
            $day++;                //count the days interms of 7 days
            if ($total_nDays > $a) {
                $m++;
                $total_nDays = 1;
                $j++;
            }
            if ($day > 7) {
                $day = 1;
            }
            if ($m > 12) {
                $y++;
                $m = 1;
            }
            if ($j > 12) {
                $j = 1;
                $i++;
            }
            $total_eDays--;
        }
        $numDay = $day;
        // _nep_date['year'] = $y;
        // _nep_date['month'] = $m;
        // _nep_date['date'] = $total_nDays;
        // $this->_nep_date['day'] = $this->_get_day_of_week($day);
        // $this->_nep_date['nmonth'] = $this->_get_nepali_month($m);
        // $this->_nep_date['num_day'] = $numDay;
        $mnth = _get_nepali_month($m);
        $weekName = _get_day_of_week($day);
        return number($mnth . ' ' . $y . '/' . $m . '/' . $total_nDays . ' ' . $weekName);
        // return _nep_date;
    }
}

function nep_to_eng($yy, $mm, $dd)
{
    $_bs = [
        0 => [2000, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        1 => [2001, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        2 => [2002, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        3 => [2003, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        4 => [2004, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        5 => [2005, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        6 => [2006, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        7 => [2007, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        8 => [2008, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        9 => [2009, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        10 => [2010, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        11 => [2011, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        12 => [2012, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        13 => [2013, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        14 => [2014, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        15 => [2015, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        16 => [2016, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        17 => [2017, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        18 => [2018, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        19 => [2019, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        20 => [2020, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        21 => [2021, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        22 => [2022, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        23 => [2023, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        24 => [2024, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        25 => [2025, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        26 => [2026, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        27 => [2027, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        28 => [2028, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        29 => [2029, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
        30 => [2030, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        31 => [2031, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        32 => [2032, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        33 => [2033, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        34 => [2034, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        35 => [2035, 30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        36 => [2036, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        37 => [2037, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        38 => [2038, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        39 => [2039, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        40 => [2040, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        41 => [2041, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        42 => [2042, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        43 => [2043, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        44 => [2044, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        45 => [2045, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        46 => [2046, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        47 => [2047, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        48 => [2048, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        49 => [2049, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        50 => [2050, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        51 => [2051, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        52 => [2052, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        53 => [2053, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        54 => [2054, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        55 => [2055, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        56 => [2056, 31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30],
        57 => [2057, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        58 => [2058, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        59 => [2059, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        60 => [2060, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        61 => [2061, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        62 => [2062, 30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31],
        63 => [2063, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        64 => [2064, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        65 => [2065, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        66 => [2066, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31],
        67 => [2067, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        68 => [2068, 31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        69 => [2069, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        70 => [2070, 31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30],
        71 => [2071, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        72 => [2072, 31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30],
        73 => [2073, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31],
        74 => [2074, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        75 => [2075, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        76 => [2076, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        77 => [2077, 31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31],
        78 => [2078, 31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30],
        79 => [2079, 31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30],
        80 => [2080, 31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30],
        81 => [2081, 31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        82 => [2082, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        83 => [2083, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
        84 => [2084, 31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30],
        85 => [2085, 31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30],
        86 => [2086, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        87 => [2087, 31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30],
        88 => [2088, 30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30],
        89 => [2089, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
        90 => [2090, 30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30],
    ];

    $def_eyy = 1943;
    $def_emm = 4;
    $def_edd = 14 - 1;    // initial english date.
    $def_nyy = 2000;
    $def_nmm = 1;
    $def_ndd = 1;        // iniital equivalent nepali date.
    $total_eDays = 0;
    $total_nDays = 0;
    $a = 0;
    $day = 4 - 1;
    $m = 0;
    $y = 0;
    $i = 0;
    $k = 0;
    $numDay = 0;
    $month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    $lmonth = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    // Check for date range
    $chk = _is_in_range_nep($yy, $mm, $dd);
    if ($chk !== true) {
        die($chk);
    } else {
        // Count total days in-terms of year
        for ($i = 0; $i < ($yy - $def_nyy); $i++) {
            for ($j = 1; $j <= 12; $j++) {
                $total_nDays += $_bs[$k][$j];
            }
            $k++;
        }
        // Count total days in-terms of month
        for ($j = 1; $j < $mm; $j++) {
            $total_nDays += $_bs[$k][$j];
        }
        // Count total days in-terms of dat
        $total_nDays += $dd;
        // Calculation of equivalent english date...
        $total_eDays = $def_edd;
        $m = $def_emm;
        $y = $def_eyy;
        while ($total_nDays != 0) {
            if (is_leap_year($y)) {
                $a = $lmonth[$m];
            } else {
                $a = $month[$m];
            }
            $total_eDays++;
            $day++;
            if ($total_eDays > $a) {
                $m++;
                $total_eDays = 1;
                if ($m > 12) {
                    $y++;
                    $m = 1;
                }
            }
            if ($day > 7) {
                $day = 1;
            }
            $total_nDays--;
        }
        $numDay = $day;
        // $this->_eng_date['year'] = $y;
        // $this->_eng_date['month'] = $m;
        // $this->_eng_date['date'] = $total_eDays;
        // $this->_eng_date['day'] = $this->_get_day_of_week($day);
        // $this->_eng_date['nmonth'] = $this->_get_english_month($m);
        // $this->_eng_date['num_day'] = $numDay;
        // return $this->_eng_date;

        return $y . '-' . sprintf('%02d', $m) . '-' . sprintf('%02d', $total_eDays);
    }
}

function convert_to_nepali_number($str)
{
    $str = strval($str);
    $array = [0 => '&#2406;',
        1 => '&#2407;',
        2 => '&#2408;',
        3 => '&#2409;',
        4 => '&#2410;',
        5 => '&#2411;',
        6 => '&#2412;',
        7 => '&#2413;',
        8 => '&#2414;',
        9 => '&#2415;',
        /*'.'=>'&#2404;'*/
    ];
    $utf = '';
    $cnt = strlen($str);
    for ($i = 0; $i < $cnt; $i++) {
        if (!isset($array[$str[$i]])) {
            $utf .= $str[$i];
        } else {
            $utf .= $array[$str[$i]];
        }
    }
    return $utf;
}


function getTodayDate()
{
    $mytime = Carbon\Carbon::now();
    return $mytime->toDateString();
}


function getTodayNepaliDate()
{
    $mytime = Carbon\Carbon::now();
    $todayDate = $mytime->toDateString();
    $localDate = str_replace("/", "-", $todayDate);
    $classes = explode("-", $localDate);
    $a = $classes[0];
    $b = $classes[1];
    $c = $classes[2];
    $currentDate = eng_to_nep($a, $b, $c);


    return $currentDate;
}

function changeUpdatedDateToNepali($UpdatedDate)
{
    $currDate = $UpdatedDate;
    $todayDate = date('Y-m-d', strtotime($currDate));
    $localDate = str_replace("-", ",", $todayDate);
    $classes = explode(",", $localDate);
    $a = $classes[0];
    $b = $classes[1];
    $c = $classes[2];
    return eng_to_nep($a, $b, $c) . '&nbsp;' . date('h:i A', strtotime($currDate));


}

function changeCreatedDateToNepali($currentDate)
{
    $currDate = $currentDate;
    $todayDate = date('Y-m-d', strtotime($currDate));
    $localDate = str_replace("-", ",", $todayDate);
    $classes = explode(",", $localDate);
    $a = $classes[0];
    $b = $classes[1];
    $c = $classes[2];
    return eng_to_nep($a, $b, $c) . '&nbsp;' . date('h:i A', strtotime($currDate));


}